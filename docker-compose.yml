services:
  # Serviço do Banco de Dados PostgreSQL
  database:
    image: postgres:15-alpine
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres        # Usuário do banco
      POSTGRES_PASSWORD: postgres   # Senha do banco
      POSTGRES_DB: dbEloquent          # Nome do banco de dados a ser criado
    ports:
      - "5432:5432" # Mapeia a porta do container para a sua máquina
    volumes:
      - postgres-data:/var/lib/postgresql/data # Volume para persistir os dados
    restart: unless-stopped

  # Serviço do Backend C#
  backend:
    container_name: backend_api
    build:
      context: ./backend # Caminho para a pasta com o Dockerfile do backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080" # Mapeia a porta da API para a sua máquina
    environment:
      # A string de conexão usa o nome do serviço 'database' como host
      ConnectionStrings__DefaultConnection: "Host=database;Port=5432;Database=dbEloquent;Username=postgres;Password=postgres;"
      ASPNETCORE_URLS: "http://+:8080"
    depends_on:
      - database # Garante que o banco de dados inicie antes da API
    restart: unless-stopped

  # Serviço do Frontend Next.js
  frontend:
    container_name: frontend_app
    build:
      context: ./frontend # Caminho para a pasta com o Dockerfile do frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000" # Mapeia a porta do Next.js para a sua máquina
    environment:
      # A URL para a API aponta para o serviço 'backend' na porta interna dele
      NEXT_PUBLIC_API_URL: "http://backend:8080"
    depends_on:
      - backend # Garante que o backend inicie antes do frontend
    restart: unless-stopped

# Define o volume nomeado para persistência do banco de dados
volumes:
  postgres-data: